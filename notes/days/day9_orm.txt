date: 12/20/2023 part 1
1. ORM stands for Object Relational Mapping
2. It is a way to query a database without having to write
    raw SQL queries

3. Some equivalent ORMs of raw sql queries
    => INSERT INTO Student (name, age, email) VALUES ("Ram", 20, "r@email.com")  #raw query
    => Student.objects.create(name="Ram", age=20, email="r@email.com")  #orm


   => Select * from Student where id=1
    => Student.objects.filter(id=1)
 ===================
 How to open shell
 ----------
python manage.py shell
 ----
from myapp.models import Student

1)Student.objects.create(name="Ram", age=20, email="r@email.com") #
2)Student.objects.all()

from .models import Student
========================
CRUD ORMs
Let's consider "Student" as a model
=====================================%==========================
Create:
Student.objects.create(name="", age=, address ="" , email="")
========================%=======================
Read:
1. Student.objects.all()
   ==> Gives all the student objects in Queryset
        output :<QuerySet [<Student: Student object (1)>,
        <Student: Student object (2)>, <Student: Student object (3)>,
        <Student: Student object (4)>, <Student: Student object (5)>]>

   ==> => Queryset also supports index as in list. But unlike list, negative indexing is not possible in queryset. #list mutable hunchh
            eg: students= Student.objects.all()
   ==> Queryset also supports index as list. But unlike list, nagative indexing is not possible in Queryset.
                eg: Student[0] correct but Student[-2 ] not support.
-------
2.Student.objects.filter(id=1)   # name search garna
    => filter() also returns queryset but it gives selected objects only.
        a.==> Student.object.filter(id=1) # query set return garchh object return gardaina ... list ma dinchh bt data haina
        b.==> Student.object.filter(address="KTM") # # query set return
    => If filter is applied to non-existing data then it returns an empty queryset (neither None nor error)
       c.==> Student.object.filter(id="us")  # queryset[]   # empty list aauchh
-------------
3. Student.objects.get(id=1) # get ma uniq huna parchh(ph no, age)
    => It returns a single object.
        eg: Student.objects.get(id=1)  # list bhitra object return garchh
            #query set didaina list ko data dinchh

    => if get() is applied to non-existing data or multiple-existing data then it raises DoesNotExists error and
        MultipleObjectsReturned error respectively.
        eg:non-existing data
            Student.objects.get(id=100)  # object does not exits
        eg:multiple-existing data
            Student.objects.get(address="ktm")  # mutiple cases, mutiple object return

------------Note----------
filter ma dherai data huda sabailaai list  bhitra return garchh. if data chhaina bhane empty data return garchh.
get ma j condition lagainx tyo chai one and only qnique data huna parchh table ma. yasma error aauchh.

---------- example_filter ---------
student= student.object.filter(id=1)
 student[0].name   # # query set ma . name laagdai na

---------- example_get ---------
student= student.object.get(id=1)
student.name  # yasma object return garx
=====================================%==========================
update:
Update:
=> update() method is used to update data in a table
=> This update() method can be used in a queryset but not in a single object.
        #query set ma chai update method use hunchh
        # .all & .filter ma update() lagchh bt .get ma lagdaina
1. Student.objects.all().update(age=30)
2. Student.objects.filter(address="KTM").update(age=30)
3. Student.objects.filter(id=1).update(name="Ram")

===================%=============

Delete:
=> delete() method is used to delete a row or multiple rows in a table
=> this delete() method can be used both in a queryset and an object

1. Student.objects.filter(address="KTM").delete()
2. Student.objects.get(id=3).delete()
===================

